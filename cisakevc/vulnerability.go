// cisakevc represents the CISA Known Exploited Vulnerability Catalog.
package cisakevc

import (
	"encoding/json"
	"os"
	"sort"
	"time"
)

type Catalog struct {
	Title           string          `json:"title"`
	CatalogVersion  string          `json:"catalogVersion"`
	DateReleased    time.Time       `json:"dateReleased"`
	Count           int             `json:"count"`
	Vulnerabilities Vulnerabilities `json:"vulnerabilities"`
}

func (c Catalog) VulnerabilitySet() (*VulnerabilitySet, error) {
	set := NewVulnerabilitySet()
	for _, v := range c.Vulnerabilities {
		if err := set.Add(v); err != nil {
			return nil, err
		}
	}
	return set, nil
}

func ReadFile(filename string) (*Catalog, error) {
	cat := &Catalog{}
	if b, err := os.ReadFile(filename); err != nil {
		return nil, err
	} else if err := json.Unmarshal(b, cat); err != nil {
		return nil, err
	} else {
		return cat, nil
	}
}

type Vulnerabilities []Vulnerability

func (vs Vulnerabilities) CVEIDs() ([]string, map[string]int) {
	var ids []string
	m := map[string]int{}
	for _, v := range vs {
		if _, ok := m[v.CVEID]; ok {
			continue
		} else {
			ids = append(ids, v.CVEID)
			m[v.CVEID]++
		}
	}
	sort.Strings(ids)
	return ids, m
}

type Vulnerability struct {
	CVEID                      string   `json:"cveID"`
	CWES                       []string `json:"cwes"`
	DateAdded                  string   `json:"dateAdded"`
	DueDate                    string   `json:"dueDate"`
	KnownRansomwareCampaignUse string   `json:"knownRansomwareCampaignUse"`
	Notes                      string   `json:"notes"`
	Product                    string   `json:"product"`
	RequiredAction             string   `json:"requiredAction"`
	ShortDescription           string   `json:"shortDescription"`
	VendorProject              string   `json:"vendorProject"`
	VulnerabilityName          string   `json:"vulnerabilityName"`
}
