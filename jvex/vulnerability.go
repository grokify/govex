package jvex

import (
	"strconv"
	"strings"
	"time"

	"github.com/grokify/govex/cve20"
	"github.com/grokify/govex/sla"
	"github.com/grokify/mogo/text/markdown"
	"github.com/grokify/mogo/time/timeutil"
	"github.com/grokify/mogo/type/stringsutil"
)

type Vulnerability struct {
	ID                  string         `json:"id"`
	Title               string         `json:"title,omitempty"`
	Description         string         `json:"description,omitempty"`
	DescriptionLang     string         `json:"descriptionLanguage,omitempty"`
	SourceIdentifier    string         `json:"sourceIdentifier"`
	Resolution          string         `json:"resolution,omitempty"`
	Status              string         `json:"status,omitempty"`
	SLAStatus           string         `json:"slaStatus,omitempty"`
	Type                string         `json:"type"`
	Severity            string         `json:"severity,omitempty"`
	VersionEndExcluding string         `json:"versionEndExcluding,omitempty"`
	App                 string         `json:"app,omitempty"`
	Metrics             cve20.Metrics  `json:"metrics,omitempty"`
	StartTime           *time.Time     `json:"startDate,omitempty"`
	ResolutionTime      *time.Time     `json:"resolutionDate,omitempty"`
	References          markdown.Links `json:"references,omitempty"`
	Fixed               bool           `json:"fixed,omitempty"`

	ProcSLAEvalTime time.Time
}

func (j *Vulnerability) CVE() cve20.CVE {
	cv := cve20.CVE{
		ID:               j.ID,
		SourceIdentifier: j.SourceIdentifier,
		VulnStatus:       j.Status,
	}
	if j.Severity != "" {
		cv.AddMetric31(j.SourceIdentifier, j.Type, j.Severity)
	}
	cv.Metrics.AppendMetrics(j.Metrics)
	cv.AddConfiguration(j.VersionEndExcluding)
	cv.AddDescription(j.Title, j.Description, j.DescriptionLang, j.App, j.VersionEndExcluding)
	return cv
}

func (j *Vulnerability) BuildSLAStatusString(slaMapDays sla.SLAMap, slaEvalTime time.Time, unknownString string) string {
	j.SLAStatus = slaMapDays.MustSLAStatusTimesString(j.Severity, j.StartTime, slaEvalTime, "")
	return j.SLAStatus
}

func (j *Vulnerability) StartTimeString(layout string, unsetTimeString string) string {
	if j.StartTime == nil {
		return unsetTimeString
	} else {
		return j.StartTime.Format(layout)
	}
}

func (j *Vulnerability) AgeDays(evalTime time.Time, unknownDays int) int {
	if j.StartTime == nil {
		return unknownDays
	} else {
		return int(timeutil.DurationDaysInt64(
			evalTime.Sub(*j.StartTime),
		))
	}
}

const (
	FieldAcceptedTime        = "Accepted Time"
	FieldAcceptedTimeRFC3339 = "Start Date"
	FieldAgeDays             = "Age"
	FieldDescription         = "Description"
	FieldFixVersion          = "Fixed Version"
	FieldID                  = "ID"
	FieldReferences          = "References"
	FieldResolution          = "Resolution"
	FieldSeverity            = "Severity"
	FieldSLAOpenStatus       = "Open SLA Status"
	FieldStatus              = "Status"
	FieldTitle               = "Title"
	FieldTitleAndDesc        = "Title/Desc"
)

type ValueOpts struct {
	SLAMap *sla.SLAMap
}

func (j *Vulnerability) Value(key, defaultValue string, opts *ValueOpts) string {
	switch key {
	case FieldAcceptedTimeRFC3339:
		return j.StartTimeString(time.RFC3339, "")
	case FieldAgeDays:
		return strconv.Itoa(j.AgeDays(j.ProcSLAEvalTime, -1))
	case FieldDescription:
		return j.Description
	case FieldFixVersion:
		return j.VersionEndExcluding
	case FieldID:
		return j.ID
	case FieldReferences:
		return strings.Join(j.References.Texts(true, true, true), " ")
	case FieldResolution:
		return j.Resolution
	case FieldSeverity:
		return stringsutil.Capitalize(j.Severity)
	case FieldSLAOpenStatus:
		if opts != nil && opts.SLAMap != nil {
			return j.BuildSLAStatusString(*opts.SLAMap, j.ProcSLAEvalTime, "")
		} else {
			return ""
		}
	case FieldStatus:
		return j.Status
	case FieldTitle:
		return j.Title
	case FieldTitleAndDesc:
		title := strings.TrimSpace(j.Value(FieldTitle, "", nil))
		desc := strings.TrimSpace(j.Value(FieldDescription, "", nil))
		var parts []string
		if title != "" {
			parts = append(parts, title)
		}
		if desc != "" {
			parts = append(parts, desc)
		}
		if len(parts) == 2 && stringsutil.ReverseIndex(parts[0], ".") != 0 {
			parts[0] += "."
		}
		return strings.Join(strings.Fields(strings.Join(parts, " ")), " ")
	default:
		return ""
	}
}

func (j *Vulnerability) Values(keys []string, opts *ValueOpts) []string {
	var s []string
	for _, key := range keys {
		s = append(s, j.Value(key, "", opts))
	}
	return s
}
